'*******************************************************************************
'**   Created by Peter Horsbøll Møller, Pitney Bowes Software
'** 	Program:
'** 	Modul:
'**
'*******************************************************************************

'-------------------------------------
Include "MapBasic.def"
Include "Enums.def"
Include "Icons.def"
Include "Menu.def"
'**default constants...
Include "Library\Defaults.def"
Include "Library\MI_ICONS_X64.def"
Include "Library\RibbonElements.def"

Define xProgram 		"MapInfo Raster Tool"
Define xProgramMenu		"MapInfo Raster Tool"
Define xVersion 		"2.0.4"
Define xYear			"2023"
Define xAddToMenuBar	FALSE

Define FILE_INI			ApplicationDirectory$() & "MapInfoRasterTool" & ".ini"
Define FILE_DBG			ApplicationDirectory$() & "MapInfoRasterTool" & ".dbg"
'Define FILE_DLL		ApplicationDirectory$() & xProgram & ".dll"
Define FILE_PAD			GetFolderPath$(FOLDER_MI_PREFERENCE) & xProgram & ".btp"

'-------------------------------------
Include "Library\ARRAYLib.def"
Include "Library\CONFIGFILELib.def"
Include "Library\DEBUGLib.def"
Include "Library\ERRORLib.def"
Include "Library\FILELib.def"
Include "Library\MAPPERLib.def"
Include "Library\ProgramInfo.def"
Include "Library\RIBBONLib.def"
Include "Library\STRINGLib.def"
Include "Library\TABLELib.def"

Include "RasterTools.def"

'-----------------------------------------------------------------------------------------

Declare Sub Main
Declare Sub MENUBuildRibbonInterface
Declare Sub MENUReadConfigFile
Declare Sub EndProgram
Declare Sub EndHandler

Declare Sub MENUMergeFilesInFolderTIF
Declare Sub MENUMergeFilesInFolderASCAsMRR
Declare Sub MENUMergeFilesInFolderMRRAsMRR
Declare Sub MENUMergeFilesInFolderAsMRR

Declare Function MENUMergeFilesIntoMRR(	  arrFilesToMerge() As String
								, ByVal bCreateTABFiles As Logical
								, ByVal sOutputFile As String
								) As String

Declare Sub MENUMergeFilesInFolderFLOATTIF
Declare Sub MENUMergeFilesInFolderThreeTIF
Declare Sub MENUMergeFilesInFoldersASCMRR


Declare Sub MENUCalculateAreaAboveThreshold
Declare Sub MENUClassifyAsMRR
Declare Sub MENURegionStatistics
Declare Sub MENURegionStatisticsBands

Declare Sub MENUStampFixedGridSizeCSV
Declare Sub MENUStampFixedGridSizeTAB
Declare Sub MENUSetFixedGridSize(ByVal fGridSizeX As Float, ByVal fGridSizeY As Float)

Declare Sub MENUExportRasterFileToASCII
Declare Sub MENURunRasterProcessorUI

Declare Function MENUGetFileExtensionFromRasterDriverID(ByVal sRasterDriverID As String) As String

Dim	msDefaultInputPath, msDefaultOutputPath As String,
	msOutputRasterDriverID As String,
	mnNumFields, mnNumBands, mnMaxInputFilesInArray As Integer,
	mfGridSizeX, mfGridSizeY As Float,
	mMapBasicRasterAddIn As This

'**********************************************************************************************''
'**   Created by Peter Horsbøll Møller, Pitney Bowes Software
'
'**********************************************************************************************''
Sub Main

OnError GoTo ErrorOccured

	'***Initializing ApplicationInfo
	Call PRGISetApplicationName(xProgram)
	Call PRGISetApplicationVersion(xVersion)
	Call PRGISetApplicationCopyrightYear(xYear)
	Call PRGISetApplicationDevelopedBy("Peter Horsbøll Møller")
	Call PRGISetApplicationImageUri(MI_IMG_RAS_MERGE_16)

	'***Enabling Debug if file exists
	Call DEBUGEnableByFile(FILE_DBG)

	'**Initiate communication with .NET Assembly
	Call RBNInitiate
	mMapBasicRasterAddIn = ADVNew_ProRasterTool()
	call ADVInitialize(mMapBasicRasterAddIn, theMapInfoApplication, ApplicationName$() )


	Alter Menu ID 4 Add
		"Merge TIF files in folder..."
			HelpMsg ""
			Calling MENUMergeFilesInFolderTIF,
		"Merge ASC files in folder as MRR..."
			HelpMsg ""
			Calling MENUMergeFilesInFolderASCAsMRR,
		"Merge files in folder as MRR..."
			HelpMsg ""
			Calling MENUMergeFilesInFolderAsMRR,
		"Merge float.TIF files in folder..."
			HelpMsg ""
			Calling MENUMergeFilesInFolderFLOATTIF,
		"Merge 10m, 20m, og 60m.TIF files in folder..."
			HelpMsg ""
			Calling MENUMergeFilesInFolderThreeTIF,
		"Merge ASC files in folders as MRRs..."
			HelpMsg ""
			Calling MENUMergeFilesInFoldersASCMRR,
		"Calculate area above threshold..."
			HelpMsg ""
			Calling MENUCalculateAreaAboveThreshold,
		"Classify as MRR..."
			HelpMsg ""
			Calling MENUClassifyAsMRR,
		"Region Statistics..."
			HelpMsg ""
			Calling MENURegionStatistics,
		"Region Statistics - multiple bands..."
			HelpMsg ""
			Calling MENURegionStatisticsBands,
		"Stamp Fixed Grid Size from CSV..."
			HelpMsg ""
			Calling MENUStampFixedGridSizeCSV,
		"Stamp Fixed Grid Size from TAB..."
			HelpMsg ""
			Calling MENUStampFixedGridSizeTAB,
		"Export Raster File to ASCII CSV..."
			HelpMsg ""
			Calling MENUExportRasterFileToASCII


	If SystemInfo(SYS_INFO_MAPINFO_INTERFACE) = MIINTERFACE_RIBBON Then
		Call MENUBuildRibbonInterface
	End If

	Call MENUReadConfigFile
	Call RBNNotificationShow(PRGIGetApplicationName(), "Input Path: " & msDefaultInputPath & lf & "Output Path: " & msDefaultOutputPath & lf & "Output Raster Format: " & msOutputRasterDriverID, Notify_Info, 10000)

	If RBNRegisterFunctionAsPublic("MENUSetFixedGridSize", "MENUSetFixedGridSize", "Used to set the desired cell size of the raster from the stamp method") Then End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "Main")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub MENUBuildRibbonInterface

Dim	nCtrlIdx As Integer

OnError GoTo ErrorOccured

	nCtrlIdx = RBNGroupAddButton("mergeMergeTIF", "Merge TIF files in folder", "", "rasterTab", "Operations")
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, xProgram, "Lets you merge TIF raster files from a selected folder", "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_RAS_MERGE_16, MI_IMG_RAS_MERGE_32)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MENUMergeFilesInFolderTIF")
	End If
	nCtrlIdx = RBNGroupAddButton("mergeMergeASC", "Merge ASC files in folder", "", "rasterTab", "Operations")
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, xProgram, "Lets you merge ASC raster files into a MRR from a selected folder", "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_RAS_MERGE_16, MI_IMG_RAS_MERGE_32)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MENUMergeFilesInFolderASCAsMRR")
	End If
	nCtrlIdx = RBNGroupAddButton("mergeMergeMRR", "Merge files in folder", "", "rasterTab", "Operations")
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, xProgram, "Lets you merge raster files into a MRR from a selected folder", "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_RAS_MERGE_16, MI_IMG_RAS_MERGE_32)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MENUMergeFilesInFolderAsMRR")
	End If
	nCtrlIdx = RBNGroupAddButton("mergeMergeFloatTIF", "Merge float.TIF files in folder", "", "rasterTab", "Operations")
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, xProgram, "Lets you merge float.TIF raster files from a selected folder", "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_RAS_MERGE_16, MI_IMG_RAS_MERGE_32)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MENUMergeFilesInFolderFLOATTIF")
	End If
	nCtrlIdx = RBNGroupAddButton("mergeMergeASCasMRRs", "Merge ASC files in folders as MRR", "", "rasterTab", "Operations")
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, xProgram, "Lets you merge ASC raster files in multiple folder into multiple MRRs from selected folders", "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_RAS_MERGE_16, MI_IMG_RAS_MERGE_32)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MENUMergeFilesInFoldersASCMRR")
	End If
	nCtrlIdx = RBNGroupAddButton("mergeMergeThreeTIF", "Merge 10m, 20m, og 60m.TIF files in folder", "", "rasterTab", "Operations")
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, xProgram, "Lets you merge 10m, 20m and 60m raster files from a selected folder", "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_RAS_MERGE_16, MI_IMG_RAS_MERGE_32)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MENUMergeFilesInFolderThreeTIF")
	End If

	nCtrlIdx = RBNGroupAddButton("calculateArea", "Calculate area above threshold", "", "rasterTab", "Operations")
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, xProgram, "Lets you calculate the area of a raster file where the value is above a certain value", "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_RAS_CALCULATOR_16, MI_IMG_RAS_CALCULATOR_32)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MENUCalculateAreaAboveThreshold")
	End If

	nCtrlIdx = RBNGroupAddButton("classifyAsMRR", "Classify as MRR", "", "rasterTab", "Operations")
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, xProgram, "Lets you classify a raster file into a number of fixed classes", "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_RAS_CLASSFRECLASSF_16, MI_IMG_RAS_CLASSFRECLASSF_32)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MENUClassifyAsMRR")
	End If

	nCtrlIdx = RBNGroupAddButton("executeRasterProcessing", "Raster Processing", "", "rasterTab", "Operations")
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, xProgram, "Run XML RasterProcessing using a XML file", "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_RAS_CALCULATOR_16, MI_IMG_RAS_CALCULATOR_32)
		'Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "ADVRunRasterProcessorUI")
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MENURunRasterProcessorUI")
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUBuildRibbonInterface")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub MENUReadConfigFile

Dim	sValue As String

OnError GoTo ErrorOccured

	msDefaultInputPath	= CONFIGReadKey(FILE_INI, "INPUTFILES", "DEFAULT_PATH")
	If msDefaultInputPath = "" Then
		msDefaultInputPath = ApplicationDirectory$()
	End If

	sValue	= CONFIGReadKey(FILE_INI, "INPUTFILES", "MAX_SIZE_FILE_ARRAY")
	If sValue = "" Then
		mnMaxInputFilesInArray = 100
	Else
		mnMaxInputFilesInArray = Val(sValue)
	End If
	mnMaxInputFilesInArray = IIf(mnMaxInputFilesInArray = 0, 100, mnMaxInputFilesInArray)

	msDefaultOutputPath	= CONFIGReadKey(FILE_INI, "OUTPUTFILES", "DEFAULT_PATH")

	msOutputRasterDriverID = CONFIGReadKey(FILE_INI, "OUTPUTFILES", "FORMAT")
	If msOutputRasterDriverID = "" Then
		msOutputRasterDriverID = "MI_MRR"
	End If

	mnNumFields = Val(CONFIGReadKey(FILE_INI, "FIELDSANDBANDS", "NUMFIELDS"))
	If mnNumFields = 0 Then
		mnNumFields = 1
	End If
	mnNumBands = Val(CONFIGReadKey(FILE_INI, "FIELDSANDBANDS", "NUMBANDS"))
	If mnNumBands = 0 Then
		mnNumBands = 1
	End If


 	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUReadConfigFile")
	Call ERRShow()

End Sub

'****************************************
'**   Created by Peter Horsbøll Møller, Pitney Bowes Software
'**   Ending MapBasic application
'****************************************
Sub EndProgram

OnError GoTo ErrorOccured

	End Program
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "EndProgram")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub EndHandler

OnError GoTo ErrorOccured

	If mMapBasicRasterAddIn <> 0 Then
		Call ADVUnload(mMapBasicRasterAddIn)
	End If
	If SystemInfo(SYS_INFO_MAPINFO_INTERFACE) = MIINTERFACE_RIBBON Then
		Call RBNEndHandler
	End If

	mMapBasicRasterAddIn = NULL_PTR

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "EndHandler")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub MENUMergeFilesInFolderTIF

Dim	sMergedFile, sFolder, arrFolders(), arrFileNames(), sResultFile As String,
	nNumFiles, nNumFolders As Integer

OnError GoTo ErrorOccured

	sFolder = FILEBrowseForFolder("Select folder with raster/grids to merge", msDefaultInputPath)
	If sFolder = "" Then
		Exit Sub
	End If

	nNumFolders = STRINGSplit(sFolder, "\", arrFolders)

	sMergedFile = FileSaveAsDlg(IIF(msDefaultOutputPath="", sFolder, msDefaultOutputPath), arrFolders(nNumFolders), MENUGetFileExtensionFromRasterDriverID(msOutputRasterDriverID), "Select path and name of merged raster file...")
	If sMergedFile = "" Then
		Exit Sub
	End If

	nNumFiles = FILEFindFilesInFolder(sFolder, "*.tif")
	If nNumFiles = 0 Then
		Note "The specified folder contains no .tif files!"
		Exit Sub
	End If

	Redim arrFileNames(nNumFiles)
	nNumFiles = FILEGetFindFilesFileNames(arrFileNames())
	If nNumFiles = 0 Then
		Note "The specified folder contains no .tif files!"
		Exit Sub
	End If

	sResultFile = ADVMergeAs(arrFileNames, sMergedFile, msOutputRasterDriverID)
	If sResultFile = "" Then
		Exit Sub
	End If

	Call RBNNotificationShow("Merging rasters", "The " & nNumFiles & " input rasters have been merged into " & sResultFile, Notify_Info, 5000)

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUMergeFilesInFolderTIF")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub MENUMergeFilesInFolderASCAsMRR

Dim	sMergedFile, sFolder, arrFolders(), arrFileNames(), sResultFile, sCoordsys As String,
	nNumFiles, nNumFolders As Integer

OnError GoTo ErrorOccured

	sFolder = FILEBrowseForFolder("Select folder with raster/grids to merge", msDefaultInputPath)
	If sFolder = "" Then
		Exit Sub
	End If

	nNumFolders = STRINGSplit(sFolder, "\", arrFolders)

	sMergedFile = FileSaveAsDlg(IIF(msDefaultOutputPath="", sFolder, msDefaultOutputPath), arrFolders(nNumFolders), MENUGetFileExtensionFromRasterDriverID("MI_MRR"), "Select path and name of merged raster file...")
	If sMergedFile = "" Then
		Exit Sub
	End If

	nNumFiles = FILEFindFilesInFolder(sFolder, "*.asc")
	If nNumFiles = 0 Then
		Note "The specified folder contains no .asc files!"
		Exit Sub
	End If

	Redim arrFileNames(nNumFiles)
	nNumFiles = FILEGetFindFilesFileNames(arrFileNames())
	If nNumFiles = 0 Then
		Note "The specified folder contains no .asc files!"
		Exit Sub
	End If

	sCoordsys = ChooseProjection$( "", True)
	If sCoordsys = "" Then
		Note "No Coordsys was selected!"
		Exit Sub
	End If

	'*Creating local tab files for all the raster files
	Print Time(24) & "  Creating Tab Files"
	Call ADVCreateTabFilesForRasterFiles(arrFileNames, sCoordsys, TRUE)

	Print Time(24) & "  Merging files: " & sMergedFile
	sResultFile = ADVMergeAsMRR(arrFileNames, sMergedFile)
	If sResultFile = "" Then
		Exit Sub
	End If

	Call RBNNotificationShow("Merging rasters", "The " & FormatNumber$(nNumFiles) & " input rasters have been merged into " & sResultFile, Notify_Info, 5000)
	Print Time(24) & " Finished merging " & FormatNumber$(nNumFiles) & " files from folder into a single MRR file"

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUMergeFilesInFolderASCAsMRR")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub MENUMergeFilesInFolderMRRAsMRR

Dim	sMergedFile, sMergedFilterFile, sFolder, arrFolders(), arrFileNames(), arrSubsetFileNames(), arrResultFiles(), sResultFile, sOutputFile, sCoordsys As String,
	nNumFiles, nNumFilesTotal, nNumOutputFiles, nNumFolders, nFilter, nFile, nCount, nResultFile As Integer,
	bCreateTABFiles As Logical

OnError GoTo ErrorOccured

	sFolder = FILEBrowseForFolder("Select folder with raster/grids to merge", msDefaultInputPath)
	If sFolder = "" Then
		Exit Sub
	End If

	nNumFolders = STRINGSplit(sFolder, "\", arrFolders)

	sMergedFile = FileSaveAsDlg(IIF(msDefaultOutputPath="", sFolder, msDefaultOutputPath), arrFolders(nNumFolders), MENUGetFileExtensionFromRasterDriverID("MI_MRR"), "Specify path and name of merged raster file...")
	If sMergedFile = "" Then
		Exit Sub
	End If

	bCreateTABFiles = FALSE
	If Not Ask("Do you want to create TAB files for the MRR files?", "No", "Yes") Then
		bCreateTABFiles = TRUE

		sCoordsys = ChooseProjection$( "", True)
		If sCoordsys = "" Then
			Note "No Coordsys was selected!"
			Exit Sub
		End If
	End If

'	If Ask("Split the merge into 10 by applying a filter like '*0.MRR', '*1.MRR' and so on when finding files?", "Yes", "No") Then
'		For nFilter = 0 To 9
'			Print Time(24) & " looking for: " & "*" & Str$(nFilter) & ".mrr in " & sFolder
'			nNumFiles = FILEFindFilesInFolder(sFolder, "*" & Str$(nFilter) & ".mrr")
'			If nNumFiles = 0 Then
'				Print "The specified folder contains no *" & Str$(nFilter) & ".MRR files!"
'			Else
'				Redim arrFileNames(nNumFiles)
'				nNumFiles			= FILEGetFindFilesFileNames(arrFileNames())
'				nNumFilesTotal		= nNumFilesTotal + nNumFiles
'
'				sMergedFilterFile	= Left$(sMergedFile, Len(sMergedFile)- 4) & "_" & Format$(nFilter, "000") & ".mrr"
'
'				Print Time(24) & " File 1: " & arrFileNames(1)
'				Print Time(24) & " File " & nNumFiles & ": " & arrFileNames(nNumFiles)
'
'				sOutputFile	= MENUMergeFilesIntoMRR(arrFileNames, bCreateTABFiles, sMergedFilterFile)
'				If sOutputFile = "" Then
'					Print "Failed to merge files into " & sMergedFilterFile
'				Else
'					nNumOutputFiles	= nNumOutputFiles + 1
'				End If
'			End If
'			Redim arrFileNames(0)
'		Next
'
'		Print Time(24) & " The " & FormatNumber$(nNumFilesTotal) & " input rasters have been merged into " & nNumOutputFiles & " output files"
'		Call RBNNotificationShow("Merging rasters", "The " & FormatNumber$(nNumFilesTotal) & " input rasters have been merged into " & nNumOutputFiles & " output files", Notify_Info, 5000)
'
'	Else
		nNumFiles = FILEFindFilesInFolder(sFolder, "*.mrr")
		Print "The specified folder contains " & Str$(nNumFiles) & ".MRR files!"
		If nNumFiles = 0 Then
			Note "The specified folder contains no .mrr files!"
			Exit Sub
		End If

		If nNumFiles > mnMaxInputFilesInArray Then
			Redim arrFileNames(mnMaxInputFilesInArray)
			Print "   Processing the files in batches of " & Str$(Ubound(arrFileNames)) & " files!"
			For nFile = 1 To nNumFiles
				nCount	= nCount + 1
				arrFileNames(nCount) = FILEGetFindFilesFileName(nFile)

				If nCount = Ubound(arrFileNames) or nFile = nNumFiles Then
					nResultFile	= nResultFile + 1
					sOutputFile	= Left$(sMergedFile, Len(sMergedFile)- 4) & "_" & Format$(nResultFile, "0000") & ".mrr"

'					Print Time(24) & " " & FormatNumber$(nResultFile) & ": Merging " & FormatNumber$(Ubound(arrFileNames)) & " files into " & sOutputFile
					Print Time(24) & " " & FormatNumber$(nResultFile) & ". batch ..."
					Print Time(24) & " Files " & FormatNumber$((nFile - nCount) + 1) & " to " & FormatNumber$(nFile) & " of " & FormatNumber$(nNumFiles)
					Print Time(24) & " File 1: " & arrFileNames(1)
					Print Time(24) & " File " & FormatNumber$(nCount) & ": " & arrFileNames(nCount)
					If nCount <> Ubound(arrFileNames) Then
						Redim arrFileNames(nCount)
					End If

					sOutputFile = MENUMergeFilesIntoMRR(arrFileNames, bCreateTABFiles, sOutputFile)
					If sOutputFile = "" Then
						Print "Failed merging MRR files into " & sOutputFile
					Else
						If Not FileExists(sOutputFile) Then
							Print "Failed merging MRR files into " & sOutputFile
						End If
					End If

'					Print Time(24) & "   " & FormatNumber$(nResultFile) & ": Merged " & FormatNumber$(Ubound(arrFileNames)) & " files from folder into a MRR file: " & sOutputFile
					nCount = 0
				End If
			Next
			Call RBNNotificationShow("Merging rasters", "The " & FormatNumber$(nNumFiles) & " input rasters have been merged into " & FormatNumber$(nResultFile) & " output files", Notify_Info, 5000)
			Print Time(24) & " Finished merging " & FormatNumber$(nNumFiles) & " files from folder into into " & FormatNumber$(nResultFile) & " output files"
		Else
			Redim arrFileNames(nNumFiles)
			nNumFiles = FILEGetFindFilesFileNames(arrFileNames())
			If nNumFiles = 0 Then
				Note "The specified folder contains no .asc files!"
				Exit Sub
			End If

			sOutputFile	= MENUMergeFilesIntoMRR(arrFileNames, bCreateTABFiles, sMergedFile)
			If sOutputFile = "" Then
				Print "Failed to merge files into " & sResultFile
				Exit Sub
			End If

			Call RBNNotificationShow("Merging rasters", "The " & FormatNumber$(nNumFiles) & " input rasters have been merged into " & sOutputFile, Notify_Info, 5000)
			Print Time(24) & " Finished merging " & FormatNumber$(nNumFiles) & " files from folder into a MRR file: " & sOutputFile
		End If
'	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUMergeFilesInFolderMRRAsMRR")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub MENUMergeFilesInFolderAsMRR

Dim	sMergedFile, sMergedFilterFile, sInputFile, sFormat, sFolder, arrFolders(), arrFileNames(), arrSubsetFileNames(), arrResultFiles(), sResultFile, sOutputFile, sCoordsys As String,
	nNumFiles, nNumFilesTotal, nNumOutputFiles, nNumFolders, nFilter, nFile, nCount, nResultFile As Integer,
	bCreateTABFiles As Logical

OnError GoTo ErrorOccured

	sInputFile	= FileOpenDlg(msDefaultInputPath, "", "*.*", "Select one of the raster/grid files in the folder you want to merge...")
	If sInputFile = "" Then
		Exit Sub
	End If

	sFormat	= FILEGetExtension(sInputFile)
	sFolder	= PathToDirectory$(sInputFile)

'	sFolder = FILEBrowseForFolder("Select folder with raster/grids to merge", msDefaultInputPath)
	If sFolder = "" Then
		Exit Sub
	End If

	nNumFolders	= STRINGSplit(sFolder, "\", arrFolders)
	sMergedFile	= IIf(arrFolders(nNumFolders)="", arrFolders(nNumFolders-1), arrFolders(nNumFolders))

	sMergedFile = FileSaveAsDlg(IIF(msDefaultOutputPath="", sFolder, msDefaultOutputPath), sMergedFile, "MRR", "Specify path and name of merged raster file...")
	If sMergedFile = "" Then
		Exit Sub
	End If

	bCreateTABFiles = FALSE
	If Not Ask("Do you want to create TAB files for the " & sFormat & " files?", "No", "Yes") Then
		bCreateTABFiles = TRUE

		sCoordsys = ChooseProjection$( "", True)
		If sCoordsys = "" Then
			Note "No Coordsys was selected!"
			Exit Sub
		End If
	End If

	nNumFiles = FILEFindFilesInFolder(sFolder, "*." & sFormat)
	Print "The specified folder contains " & Str$(nNumFiles) & "." & sFormat & " files!"
	If nNumFiles = 0 Then
		Note "The specified folder contains no ." & sFormat & " files!"
		Exit Sub
	End If

	If nNumFiles > mnMaxInputFilesInArray Then
		Redim arrFileNames(mnMaxInputFilesInArray)
		Print "   Processing the files in batches of " & Str$(Ubound(arrFileNames)) & " files!"
		For nFile = 1 To nNumFiles
			nCount	= nCount + 1
			arrFileNames(nCount) = FILEGetFindFilesFileName(nFile)

			If nCount = Ubound(arrFileNames) or nFile = nNumFiles Then
				nResultFile	= nResultFile + 1
				sOutputFile	= Left$(sMergedFile, Len(sMergedFile)- 4) & "_" & Format$(nResultFile, "0000") & ".MRR"

'				Print Time(24) & " " & FormatNumber$(nResultFile) & ": Merging " & FormatNumber$(Ubound(arrFileNames)) & " files into " & sOutputFile
				Print Time(24) & " " & FormatNumber$(nResultFile) & ". batch ..."
				Print Time(24) & " Files " & FormatNumber$((nFile - nCount) + 1) & " to " & FormatNumber$(nFile) & " of " & FormatNumber$(nNumFiles)
				Print Time(24) & " File 1: " & arrFileNames(1)
				Print Time(24) & " File " & FormatNumber$(nCount) & ": " & arrFileNames(nCount)
				If nCount <> Ubound(arrFileNames) Then
					'**Resizing array of input files to actual number
					'** - typically done in the last batch where there is fewer files than the maximum for a single merge
					Redim arrFileNames(nCount)
				End If

				sOutputFile = MENUMergeFilesIntoMRR(arrFileNames, bCreateTABFiles, sOutputFile)
				If sOutputFile = "" Then
					Print "Failed merging " & sFormat & " files into " & sOutputFile
				Else
					If Not FileExists(sOutputFile) Then
						Print "Failed merging " & sFormat & " files into " & sOutputFile
					End If
				End If

'				Print Time(24) & "   " & FormatNumber$(nResultFile) & ": Merged " & FormatNumber$(Ubound(arrFileNames)) & " files from folder into a MRR file: " & sOutputFile
				nCount = 0
			End If
		Next
		Call RBNNotificationShow("Merging rasters", "The " & FormatNumber$(nNumFiles) & " input rasters have been merged into " & FormatNumber$(nResultFile) & " output files", Notify_Info, 5000)
		Print Time(24) & " Finished merging " & FormatNumber$(nNumFiles) & " files from folder into into " & FormatNumber$(nResultFile) & " output files"
	Else
		Redim arrFileNames(nNumFiles)
		nNumFiles = FILEGetFindFilesFileNames(arrFileNames())
		If nNumFiles = 0 Then
			Note "The specified folder contains no ." & sFormat & " files!"
			Exit Sub
		End If

		sOutputFile	= MENUMergeFilesIntoMRR(arrFileNames, bCreateTABFiles, sMergedFile)
		If sOutputFile = "" Then
			Print "Failed to merge files into " & sResultFile
			Exit Sub
		End If

		Call RBNNotificationShow("Merging rasters", "The " & FormatNumber$(nNumFiles) & " input rasters have been merged into " & sOutputFile, Notify_Info, 5000)
		Print Time(24) & " Finished merging " & FormatNumber$(nNumFiles) & " files from folder into a MRR file: " & sOutputFile
	End If
'	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUMergeFilesInFolderAsMRR")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter HorsbÃ¸ll MÃ¸ller, Precisely
'Parameters:
'
'**********************************************************************************************''
Function MENUMergeFilesIntoMRR( arrFilesToMerge() As String
						, ByVal bCreateTABFiles As Logical
						, ByVal sOutputFile As String
						) As String

Dim	arrSubsetFileNames(), arrResultFiles() As String,
	nCount, nFile, nNumFiles, nResultFile As Integer

OnError GoTo ErrorOccured

MENUMergeFilesIntoMRR = ""

	nNumFiles	= Ubound(arrFilesToMerge)
	Redim arrSubsetFileNames(mnMaxInputFilesInArray)

	Print Time(24) & "    Total number of files: " & FormatNumber$(nNumFiles)
	If nNumFiles > Ubound(arrSubsetFileNames) Then
		nCount = 0
		Print Time(24) & "    Merging in batches of : " & FormatNumber$(Ubound(arrSubsetFileNames)) & " files"
		For nFile = 1 To nNumFiles
			nCount	= nCount + 1
			arrSubsetFileNames(nCount) = arrFilesToMerge(nFile)

			If nCount = Ubound(arrSubsetFileNames) or nFile = nNumFiles Then
				Print Time(24) & "    Files " & FormatNumber$((nFile - nCount) + 1) & " to " & FormatNumber$(nFile) & " of " & FormatNumber$(nNumFiles)
				If nCount <> Ubound(arrSubsetFileNames) Then
					Redim arrSubsetFileNames(nCount)
				End If
				If bCreateTABFiles Then
					'*Creating local tab files for all the raster files
					Print Time(24) & "    Creating Tab Files"
					Call ADVCreateTabFilesForRasterFiles(arrFilesToMerge, sCoordsys, TRUE)
				End If

				nResultFile	= nResultFile + 1
				Redim arrResultFiles(nResultFile)
				arrResultFiles(nResultFile)	= PathToDirectory$(sOutputFile) & "__temp_" & Format$(nResultFile, "0000") & "." & MENUGetFileExtensionFromRasterDriverID("MI_MRR")
				Print Time(24) & "    " & FormatNumber$(nResultFile) & ": Merging " & FormatNumber$(Ubound(arrSubsetFileNames)) & " files into " & arrResultFiles(nResultFile)
				arrResultFiles(nResultFile) = ADVMergeAsMRR(arrFilesToMerge, arrResultFiles(nResultFile))
				If arrResultFiles(nResultFile) = "" Then
					Print "    Failed merging MRR files into " & arrResultFiles(nResultFile)
					nResultFile	= nResultFile - 1
					Redim arrResultFiles(nResultFile)
				Else
					If Not FileExists(arrResultFiles(nResultFile)) Then
						Print "    Failed merging MRR files into " & arrResultFiles(nResultFile)
						nResultFile	= nResultFile - 1
						Redim arrResultFiles(nResultFile)
					End If
				End If

				Print Time(24) & "    " & FormatNumber$(nResultFile) & ": Merged " & FormatNumber$(Ubound(arrSubsetFileNames)) & " files from folder into a MRR file: " & arrResultFiles(nResultFile)
				nCount = 0
			End If
		Next

		Print Time(24) & "    Merging " & FormatNumber$(Ubound(arrResultFiles)) & " temporary result files into " & sOutputFile
		sOutputFile = ADVMergeAsMRR(arrResultFiles, sOutputFile)
		If sOutputFile = "" Then
			Print "    Failed merging MRR files into " & sOutputFile
		Else
			For nFile = 1 To Ubound(arrResultFiles)
				Call ADVRasterDelete(arrResultFiles(nFile))
			Next
		End If
	Else
		If bCreateTABFiles Then
			'*Creating local tab files for all the raster files
			Print Time(24) & "    Creating Tab Files"
			Call ADVCreateTabFilesForRasterFiles(arrFilesToMerge, sCoordsys, TRUE)
		End If

		Print Time(24) & "    Merging " & FormatNumber$(Ubound(arrFilesToMerge)) & " files into : " & sOutputFile
		sOutputFile = ADVMergeAsMRR(arrFilesToMerge, sOutputFile)
		If sOutputFile = "" Then
			Print "    Failed merging MRR files into " & sOutputFile
			Exit Function
		Else
			If Not FileExists(sOutputFile) Then
				Print "    Failed merging MRR files into " & sOutputFile
			End If
		End If
	End If

	Print Time(24) & "    Finished merging " & FormatNumber$(nNumFiles) & " files from folder into a MRR file: " & sOutputFile
	MENUMergeFilesIntoMRR = sOutputFile

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUMergeFilesIntoMRR")
	Call ERRShow()

End Function



'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub MENUMergeFilesInFoldersASCMRR

Dim	sMergedFile, sMainFolder, sFolder, arrFolders(), arrFileNames(), sResultFile, sCoordsys As String,
	nFolder, nNumFiles, nNumFolders As Integer

OnError GoTo ErrorOccured

	sMainFolder = FILEBrowseForFolder("Select folder with folders with raster/grids to merge", msDefaultInputPath)
	If sMainFolder = "" Then
		Exit Sub
	End If

	nNumFolders = FILEFindFoldersInFolder(sMainFolder, "*")
	If nNumFolders = 0 Then
		Note "The selected folder doesn't have any sub folders!"
		Exit Sub
	End If

	sCoordsys = ChooseProjection$( "", True)
	If sCoordsys = "" Then
		Note "No Coordsys was selected!"
		Exit Sub
	End If

	For nFolder = 1 To nNumFolders
		sFolder	= FILEGetFindFoldersFolderName(nFolder)
		sMergedFile = sFolder & "." & MENUGetFileExtensionFromRasterDriverID("MI_MRR")
		Print Time(24) & " " & nFolder & "/" & nNumFolders & " " & sFolder & " Merged into File: " & sMergedFile
		nNumFiles = FILEFindFilesInFolder(sFolder, "*.asc")
		If nNumFiles > 0 Then
			Redim arrFileNames(nNumFiles)
			nNumFiles = FILEGetFindFilesFileNames(arrFileNames())

			'*Creating local tab files for all the raster files
			Print Time(24) & "  Creating Tab Files"
			Call ADVCreateTabFilesForRasterFiles(arrFileNames, sCoordsys, TRUE)

			Print Time(24) & "  Merging files: " & sMergedFile
			sResultFile = ADVMergeAsMRR(arrFileNames, sMergedFile)
			If sResultFile = "" Then
				Print "Failed creating file " & nFolder & ": " & sMergedFile
			Else
				Call RBNNotificationShow("Merging rasters", nFolder & "/" & FormatNumber$(nNumFolders) & ": The " & FormatNumber$(nNumFiles) & " input rasters have been merged into " & sResultFile, Notify_Info, 5000)
			End If
		End If
	Next
	Print Time(24) & " Finished merging files from folders into " & FormatNumber$(nNumFolders) & " MRR files"

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUMergeFilesInFolderASCAsMRR")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub MENUMergeFilesInFolderFLOATTIF

Dim	sMergedFile, sFolder, arrFolders(), arrFileNames(), sResultFile As String,
	nNumFiles, nNumFolders As Integer

OnError GoTo ErrorOccured

	sFolder = FILEBrowseForFolder("Select folder with raster/grids to merge", msDefaultInputPath)
	If sFolder = "" Then
		Exit Sub
	End If

	nNumFolders = STRINGSplit(sFolder, "\", arrFolders)

	'***Name the resulting file as the folderfollowed by " 10 m", " 20 m", "60 m"
	sMergedFile = FileSaveAsDlg(IIF(msDefaultOutputPath="", sFolder, msDefaultOutputPath), arrFolders(nNumFolders), MENUGetFileExtensionFromRasterDriverID(msOutputRasterDriverID), "Select path and name of merged raster file...")
	If sMergedFile = "" Then
		Exit Sub
	End If

	nNumFiles = FILEFindFilesInFolder(sFolder, "*float.tif")
	If nNumFiles = 0 Then
		Note "The specified folder contains no .tif files!"
		Exit Sub
	End If

	Redim arrFileNames(nNumFiles)
	nNumFiles = FILEGetFindFilesFileNames(arrFileNames())
	If nNumFiles = 0 Then
		Note "The specified folder contains no .tif files!"
		Exit Sub
	End If

	sResultFile = ADVMergeAs(arrFileNames, sMergedFile, msOutputRasterDriverID)
	If sResultFile = "" Then
		Exit Sub
	End If

	Call RBNNotificationShow("Merging rasters", "The " & nNumFiles & " input rasters have been merged into " & sResultFile, Notify_Info, 5000)

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUMergeFilesInFolderFLOATTIF")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub MENUMergeFilesInFolderThreeTIF

Dim	sMergedFile, sFolder, arrFolders(), arrFileNames(), sResultFile, sFileSearch As String,
	nNumFiles, nNumFolders, i As Integer

OnError GoTo ErrorOccured

	sFolder = FILEBrowseForFolder("Select folder with raster/grids to merge", msDefaultInputPath)
	If sFolder = "" Then
		Exit Sub
	End If

	nNumFolders = STRINGSplit(sFolder, "\", arrFolders)

	'**Loop 3 times to find the 10, 20 and 60 meter raster files and merge these
	For i = 1 to 3
		Do Case i
			Case 1
				sFileSearch	= "*_10m.tif"
				sMergedFile	= FILEAddBackSlash(sFolder) & arrFolders(nNumFolders) & "_10m." & MENUGetFileExtensionFromRasterDriverID(msOutputRasterDriverID)
			Case 2
				sFileSearch	= "*_20m.tif"
				sMergedFile	= FILEAddBackSlash(sFolder) & arrFolders(nNumFolders) & "_20m." & MENUGetFileExtensionFromRasterDriverID(msOutputRasterDriverID)
			Case 3
				sFileSearch	= "*_60m.tif"
				sMergedFile	= FILEAddBackSlash(sFolder) & arrFolders(nNumFolders) & "_60m." & MENUGetFileExtensionFromRasterDriverID(msOutputRasterDriverID)
		End Case

		Call DEBUGPrint ("Merging " & sFileSearch & " raster files...")

		nNumFiles = FILEFindFilesInFolder(sFolder, sFileSearch)
		If nNumFiles > 0 Then
			Redim arrFileNames(nNumFiles)
			nNumFiles = FILEGetFindFilesFileNames(arrFileNames())
			If nNumFiles > 0 Then
				Call DEBUGPrint ("   Found " & nNumFiles & " raster files...")
				Call DEBUGPrint ("1: " & arrFileNames(1))
				Call DEBUGPrint ("Saving as " & sMergedFile)
				sResultFile = ADVMergeAs(arrFileNames, sMergedFile, msOutputRasterDriverID)
				If sResultFile = "" Then
					Exit Sub
				End If
				Call RBNNotificationShow("Merging rasters", "The " & nNumFiles & " input rasters have been merged into " & sResultFile, Notify_Info, 5000)
			Else
				Print "The specified folder contains no " & sFileSearch & " files!"
			End If
		Else
			Print "The specified folder contains no " & sFileSearch & " files!"
		End If
	Next

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUMergeFilesInFolderThreeTIF")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub MENUCalculateAreaAboveThreshold

Dim	fCellArea As Float,
	sRasterFile As String

OnError GoTo ErrorOccured

	sRasterFile	= FileOpenDlg(msDefaultInputPath, "", "MRR", "Select Raster to calculate area for...")
	If sRasterFile = "" Then
		Exit Sub
	End If

	fCellArea = ADVGetCellAreaAboveThreshold(sRasterFile, 0, 0, 19)
	Note "Total Cell Area = " & FormatNumber$(fCellArea) & " sq m"

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUCalculateAreaAboveThreshold")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub MENUClassifyAsMRR

Dim	sInputFilePath, sOutputFilePath As String

OnError GoTo ErrorOccured

	sInputFilePath	= FileOpenDlg(msDefaultInputPath, "", "MRR", "Select Raster to calculate area for...")
	If sInputFilePath = "" Then
		Exit Sub
	End If

	sOutputFilePath	= FileSaveAsDlg(PathToDirectory$(sInputFilePath), "Classified", "MRR", "Select path and name of classified MRR...")
	If sOutputFilePath = "" Then
		Exit Sub
	End If

	sOutputFilePath	= ADVContinuousToClassifiedMRR(sInputFilePath, sOutputFilePath)
	If sOutputFilePath = "" Then
		Exit Sub
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUClassifyAsMRR")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub MENURegionStatistics

Dim	bMinimumValue, bMaximumValue, bAverageValue, bMedianValue, bNumCells, bNumNullCells  As Logical,
	bCoefficientOfVariance, bRange, bStandardDeviation, bSumOfCells, bLowerQuartile, bUpperQuartile, bInterQuartileRange As Logical,
	sFile, sType, sFolder, sInputVectorFile, sOutputTABFilePath, arrRasterFilePaths(), arrTempRasterFile(1), sTempFile, sTempFilePrev, sTemp As String,
	nNumFiles, nFile As Integer

OnError GoTo ErrorOccured

	sFile 	= FileOpenDlg(msDefaultInputPath, "", "*.*", "Select a single grid file in the folder you want to use...")
	If sFile = "" Then
		Exit Sub
	End If
	sFolder	= PathToDirectory$(sFile)
	sType 	= Right$(sFile, 4)

	nNumFiles = FILEFindFilesInFolder(sFolder, "*" & sType)
	If nNumFiles = 0 Then
		Note "The specified folder contains no " & sType & " files!"
		Exit Sub
	End If

	Redim arrRasterFilePaths(nNumFiles)
	nNumFiles = FILEGetFindFilesFileNames(arrRasterFilePaths())
	If nNumFiles = 0 Then
		Note "The specified folder contains no " & sType & " files!"
		Exit Sub
	End If

	sInputVectorFile	= FileOpenDlg("", "", "TAB", "Select table to update with region statistics...")
	If sInputVectorFile = "" Then
		Exit Sub
	End If

	sOutputTABFilePath = Left$(sInputVectorFile, Len(sInputVectorFile) - 4) & " Region Inspection.tab"

	sOutputTABFilePath = FileSaveAsDlg(PathToDirectory$(sOutputTABFilePath), PathToFileName$(sOutputTABFilePath), "TAB", "Select path and name of new table with region statistics...")
	If sOutputTABFilePath = "" Then
		Exit Sub
	End If

	bMinimumValue			= IIf(CONFIGReadKey(FILE_INI, "STATISTICS", "MINIMUM")="0", FALSE, TRUE)		'TRUE
	bMaximumValue			= IIf(CONFIGReadKey(FILE_INI, "STATISTICS", "MAXIMUM")="0", FALSE, TRUE)		'TRUE
	bAverageValue			= IIf(CONFIGReadKey(FILE_INI, "STATISTICS", "AVERAGE")="0", FALSE, TRUE)		'TRUE
	bMedianValue			= IIf(CONFIGReadKey(FILE_INI, "STATISTICS", "MEDIAN")="0", FALSE, TRUE)		'TRUE
	bNumCells				= IIf(CONFIGReadKey(FILE_INI, "STATISTICS", "NUMCELLS")="0", FALSE, TRUE)		'TRUE
	bNumNullCells			= IIf(CONFIGReadKey(FILE_INI, "STATISTICS", "NUMNULLCELLS")="0", FALSE, TRUE)		'TRUE
	bCoefficientOfVariance	= IIf(CONFIGReadKey(FILE_INI, "STATISTICS", "COEFFICIENTOFVARIANCE")="0", FALSE, TRUE)		'TRUE
	bRange				= IIf(CONFIGReadKey(FILE_INI, "STATISTICS", "RANGE")="0", FALSE, TRUE)		'TRUE
	bStandardDeviation		= IIf(CONFIGReadKey(FILE_INI, "STATISTICS", "STANDARDDEVIATION")="0", FALSE, TRUE)		'TRUE
	bSumOfCells			= IIf(CONFIGReadKey(FILE_INI, "STATISTICS", "SUMOFCELLS")="0", FALSE, TRUE)		'TRUE
	bLowerQuartile			= IIf(CONFIGReadKey(FILE_INI, "STATISTICS", "LOWERQUARTILE")="0", FALSE, TRUE)		'TRUE
	bUpperQuartile			= IIf(CONFIGReadKey(FILE_INI, "STATISTICS", "UPPERQUARTILE")="0", FALSE, TRUE)		'TRUE
	bInterQuartileRange		= IIf(CONFIGReadKey(FILE_INI, "STATISTICS", "INTERQUARTILERANGE")="0", FALSE, TRUE)		'TRUE

	For nFile = 1 To nNumFiles
		If nFile = 1 Then
			sTempFile = sInputVectorFile
		Else
			sTempFile = sTempFilePrev
		End If
		If nFile = nNumFiles Then
			sTempFilePrev	=  sOutputTABFilePath
		Else
			sTempFilePrev	= TempFileName$("")
		End If

		arrTempRasterFile(1)	= arrRasterFilePaths(nFile)
		Call DEBUGPrint (nFile & ": " & PathToFileName$(sTempFile) & " -> " & PathToFileName$(sTempFilePrev) & " (" & PathToFileName$(arrTempRasterFile(1)) & ")")
		sTemp = ADVRegionInspection( sTempFile, arrTempRasterFile, sTempFilePrev
									, bMinimumValue, bMaximumValue, bAverageValue, bMedianValue, bNumCells, bNumNullCells
									, bCoefficientOfVariance, bRange, bStandardDeviation, bSumOfCells, bLowerQuartile, bUpperQuartile, bInterQuartileRange)
		If sTemp = "" Then
			Print "Failed to do Region Statistics using " & PathToFileName$(arrTempRasterFile(1))
		End If
	Next

	If NOT sOutputTABFilePath = "" Then
		Open Table sOutputTABFilePath
		Browse * From PathToTableName$(sOutputTABFilePath)
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENURegionStatistics")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub MENURegionStatisticsBands

Dim	bMinimumValue, bMaximumValue, bAverageValue, bMedianValue, bNumCells, bNumNullCells  As Logical,
	bCoefficientOfVariance, bRange, bStandardDeviation, bSumOfCells, bLowerQuartile, bUpperQuartile, bInterQuartileRange As Logical,
	sFile, sInputRasterFile, sType, sFolder, sInputVectorFile, sOutputTABFilePath, arrRasterFilePaths(), arrTempRasterFiles(), sTempFile, sTempFilePrev, sTemp As String,
	nNumFiles, nInputFile, nFile, nField, nBand As Integer

OnError GoTo ErrorOccured

	sInputRasterFile 	= FileOpenDlg(msDefaultInputPath, "", "*.*", "Select a single grid file in the folder you want to use...")
'	sInputRasterFile 	= FileOpenDlg(msDefaultInputPath, "", "*.*", "Select grid file you want to use for inspection...")
	If sInputRasterFile = "" Then
		Exit Sub
	End If
	sFolder	= PathToDirectory$(sInputRasterFile)
	sType 	= Right$(sInputRasterFile, 4)

	nNumFiles = FILEFindFilesInFolder(sFolder, "*" & sType)
	If nNumFiles = 0 Then
		Note "The specified folder contains no " & sType & " files!"
		Exit Sub
	End If

	Redim arrRasterFilePaths(nNumFiles)
	nNumFiles = FILEGetFindFilesFileNames(arrRasterFilePaths())
	If nNumFiles = 0 Then
		Note "The specified folder contains no " & sType & " files!"
		Exit Sub
	End If

	sInputVectorFile	= FileOpenDlg("", "", "TAB", "Select vector table to update with region statistics...")
	If sInputVectorFile = "" Then
		Exit Sub
	End If

	sOutputTABFilePath = Left$(sInputVectorFile, Len(sInputVectorFile) - 4) & " Region Inspection.tab"

	sOutputTABFilePath = FileSaveAsDlg(PathToDirectory$(sOutputTABFilePath), PathToFileName$(sOutputTABFilePath), "TAB", "Select path and name of new table with region statistics...")
	If sOutputTABFilePath = "" Then
		Exit Sub
	End If

	bMinimumValue			= IIf(CONFIGReadKey(FILE_INI, "STATISTICS", "MINIMUM")="0", FALSE, TRUE)		'TRUE
	bMaximumValue			= IIf(CONFIGReadKey(FILE_INI, "STATISTICS", "MAXIMUM")="0", FALSE, TRUE)		'TRUE
	bAverageValue			= IIf(CONFIGReadKey(FILE_INI, "STATISTICS", "AVERAGE")="0", FALSE, TRUE)		'TRUE
	bMedianValue			= IIf(CONFIGReadKey(FILE_INI, "STATISTICS", "MEDIAN")="0", FALSE, TRUE)		'TRUE
	bNumCells				= IIf(CONFIGReadKey(FILE_INI, "STATISTICS", "NUMCELLS")="0", FALSE, TRUE)		'TRUE
	bNumNullCells			= IIf(CONFIGReadKey(FILE_INI, "STATISTICS", "NUMNULLCELLS")="0", FALSE, TRUE)		'TRUE
	bCoefficientOfVariance	= IIf(CONFIGReadKey(FILE_INI, "STATISTICS", "COEFFICIENTOFVARIANCE")="0", FALSE, TRUE)		'TRUE
	bRange				= IIf(CONFIGReadKey(FILE_INI, "STATISTICS", "RANGE")="0", FALSE, TRUE)		'TRUE
	bStandardDeviation		= IIf(CONFIGReadKey(FILE_INI, "STATISTICS", "STANDARDDEVIATION")="0", FALSE, TRUE)		'TRUE
	bSumOfCells			= IIf(CONFIGReadKey(FILE_INI, "STATISTICS", "SUMOFCELLS")="0", FALSE, TRUE)		'TRUE
	bLowerQuartile			= IIf(CONFIGReadKey(FILE_INI, "STATISTICS", "LOWERQUARTILE")="0", FALSE, TRUE)		'TRUE
	bUpperQuartile			= IIf(CONFIGReadKey(FILE_INI, "STATISTICS", "UPPERQUARTILE")="0", FALSE, TRUE)		'TRUE
	bInterQuartileRange		= IIf(CONFIGReadKey(FILE_INI, "STATISTICS", "INTERQUARTILERANGE")="0", FALSE, TRUE)		'TRUE

	nFile = 0
	ReDim arrTempRasterFiles(nFile)
	For nInputFile = 1 To nNumFiles
		sFile					= PathToFileName$(arrRasterFilePaths(nInputFile))
		Call DEBUGPrint ("Export Bands from " & arrRasterFilePaths(nInputFile))
		For nField = 0 To (mnNumFields - 1)
			For nBand = 0 To (mnNumBands - 1)
				nFile = nFile + 1
				ReDim arrTempRasterFiles(nFile)
				arrTempRasterFiles(nFile)	= PathToDirectory$(TempFileName$("")) & Left$(sFile, Len(sFile) - 4) & "_" & nField & "_" & nBand & "." & MENUGetFileExtensionFromRasterDriverID("MI_MRR")

				Call DEBUGPrint ("  Field " & nField & " Band: " & nBand & ": -> " & arrTempRasterFiles(nFile))
				sTemp = ADVRasterExportBand(arrRasterFilePaths(nInputFile), nField, nBand, arrTempRasterFiles(nFile), "MI_MRR")

			Next	'Band
		Next	'Field
	Next

	Call DEBUGPrint ("Region Inspection: " & Ubound(arrTempRasterFiles) & " raster files...")
'	sTemp = ADVRegionInspectionBands(sInputVectorFile, arrTempRasterFiles, nField, nBand, sOutputTABFilePath
	sTemp = ADVRegionInspection(sInputVectorFile, arrTempRasterFiles, sOutputTABFilePath
							, bMinimumValue, bMaximumValue, bAverageValue, bMedianValue, bNumCells, bNumNullCells
							, bCoefficientOfVariance, bRange, bStandardDeviation, bSumOfCells, bLowerQuartile, bUpperQuartile, bInterQuartileRange)
	If sTemp = "" Then
		Print "Failed to do Region Statistics on " & PathToFileName$(sInputRasterFile)
	End If

	For nFile = 1 To Ubound(arrTempRasterFiles)
'		Call DEBUGPrint ("Delete Raster: " & PathToFileName$(arrTempRasterFiles(nFile)))
		Call ADVRasterDelete(arrTempRasterFiles(nFile))
	Next

	If NOT sOutputTABFilePath = "" Then
		Open Table sOutputTABFilePath
		Browse * From PathToTableName$(sOutputTABFilePath)
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENURegionStatisticsBands")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub MENUStampFixedGridSizeCSV

Dim	sTab, sInputCSVFile, sInputTabFile, sOutputGridFile, sGridFileType As String,
	fOriginX, fOriginY, fMinX, fMinY, fMaxX, fMaxY, fMinDistance, fValue1, fValue2  As Float,
	nNumColumnsX, nNumRowsY As Integer

OnError GoTo ErrorOccured

	sInputCSVFile	= FileOpenDlg("", "", "CSV", "Select CSV File as input file...")
	If sInputCSVFile = "" Then
		Exit Sub
	End If

	sGridFileType		= MENUGetFileExtensionFromRasterDriverID("MI_BandInterleaved_BIL")
'	sOutputGridFile	= PathToDirectory$(sInputTabFile) & "Test." & sGridFileType
	sOutputGridFile	= FileSaveAsDlg(PathToDirectory$(sInputCSVFile), Left$(PathToFileName$(sInputCSVFile), Len(PathToFileName$(sInputCSVFile)) - 4), sGridFileType, "Select Raster Grid File (" & sGridFileType & ") as output file...")
	If sOutputGridFile = "" Then
		Exit Sub
	End If

	sInputTabFile	= TempFileName$("")
	Register Table sInputCSVFile
		TYPE ASCII
		Delimiter 44
		Titles
		Charset "WindowsLatin1"
		Into sInputTabFile
	Open Table sInputTabFile Hide
	sTab = PathToTableName$(sInputTabFile)
	Commit Table sTab As PathToDirectory$(sInputTabFile) & "_convertInput.TAB"
	Close Table sTab
	sInputTabFile	= PathToDirectory$(sInputTabFile) & "_convertInput.TAB"
	Open Table sInputTabFile
	sTab = PathToTableName$(sInputTabFile)

	Create Map For sTab
		CoordSys Earth Projection 1, 104
	Set Table sTab FastEdit On Undo Off
	Update sTab
		Set Obj = CreatePoint(LONGITUDE, LATITUDE)
	Commit Table sTab
	Set Table sTab Undo On

	Set CoordSys Table sTab
	fMinX		= TableInfo(sTab, TAB_INFO_MINX)
	fMinY		= TableInfo(sTab, TAB_INFO_MINY)
	fMaxX		= TableInfo(stab, TAB_INFO_MAXX)
	fMaxY		= TableInfo(stab, TAB_INFO_MAXY)

	Print Time(24) & " Finding distance between Logitude values"
	Select LONGITUDE
		From sTab
		Order By LONGITUDE
		Group By LONGITUDE
		Into __MIN_DIST NoSelect

	fMinDistance	= 2.00
	Fetch First From __MIN_DIST
	fValue1 = __MIN_DIST.LONGITUDE
	Fetch Next From __MIN_DIST
	Do Until EOT(__MIN_DIST)
		fValue2  = __MIN_DIST.LONGITUDE
		If fMinDistance > (fValue2 - fValue1) Then
			fMinDistance = (fValue2 - fValue1)
			'Print "Minimum LONGITUDE distance: " & Format$(fMinDistance, "#.##########")
		End If
		fValue1 = fValue2
		Fetch Next From __MIN_DIST
	Loop
	mfGridSizeX	= fMinDistance
	Close Table __MIN_DIST

	Print Time(24) & " Finding distance between Latitude values"
	Select LATITUDE
		From sTab
		Order By LATITUDE
		Group By LATITUDE
		Into __MIN_DIST NoSelect

	fMinDistance	= 2.00
	Fetch First From __MIN_DIST
	fValue1 = __MIN_DIST.LATITUDE
	Fetch Next From __MIN_DIST

	Do Until EOT(__MIN_DIST)
		fValue2  = __MIN_DIST.LATITUDE
		If fMinDistance > (fValue2 - fValue1) Then
			fMinDistance = (fValue2 - fValue1)
			'Print "Minimum LATITUDE distance: " & Format$(fMinDistance, "#.##########")
		End If
		fValue1 = fValue2
		Fetch Next From __MIN_DIST
	Loop
	mfGridSizeY	= fMinDistance
	Close Table __MIN_DIST

	fOriginX		= fMinX - (mfGridSizeX/2)
	fOriginY		= fMinY - (mfGridSizeY/2)
	nNumColumnsX	= (fMaxX - fMinX) / mfGridSizeX
	nNumRowsY		= (fMaxY - fMinY) / mfGridSizeY

	Print "Data Area: Min X: " & Format$(fMinX, "#.######") & " Min Y: " & Format$(fMinY, "#.######")
	Print "Data Area: Max X: " & Format$(fMaxX, "#.######") & " Max Y: " & Format$(fMaxY, "#.######")
	Print "Difference X: " & Format$((fMaxX - fMinX), "#.######")
	Print "Difference Y: " & Format$((fMaxY - fMinY), "#.######")
	Print "Grid Origin X: " & Format$((fOriginX), "#.########")
	Print "Grid Origin Y: " & Format$((fOriginY), "#.########")
	Print "Cell Size X: " & Format$((mfGridSizeX), "#.########")
	Print "Cell Size Y: " & Format$((mfGridSizeY), "#.########")
	Print "Grid Columns X: " & FormatNumber$(nNumColumnsX)
	Print "Grid Rows Y: " & FormatNumber$(nNumRowsY)

	Call ADVStampFixedGridSize(sInputTabFile, "CoordSys Earth Projection 1, 104", sOutputGridFile, "MI_BandInterleaved_BIL", fOriginX, fOriginY, mfGridSizeX, mfGridSizeY, nNumColumnsX, nNumRowsY, 2)

	Open Table sOutputGridFile
	Map From PathToTableName$(sOutputGridFile)

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUStampFixedGridSizeCSV")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub MENUStampFixedGridSizeTAB

Dim	sTab, sInputTabFile, sOutputGridFile, sGridFileType As String,
	fOriginX, fOriginY, fMinX, fMinY, fMaxX, fMaxY, fMinDistance, fValue1, fValue2  As Float,
	nNumColumnsX, nNumRowsY As Integer

OnError GoTo ErrorOccured

	sInputTabFile	= FileOpenDlg("", "", "TAB", "Select TAB File as input file...")
	If sInputTabFile = "" Then
		Exit Sub
	End If

	sGridFileType		= MENUGetFileExtensionFromRasterDriverID("MI_MRR")
'	sOutputGridFile	= PathToDirectory$(sInputTabFile) & "Test." & sGridFileType
	sOutputGridFile	= FileSaveAsDlg(PathToDirectory$(sInputTabFile), Left$(PathToFileName$(sInputTabFile), Len(PathToFileName$(sInputTabFile)) - 4), sGridFileType, "Select Raster Grid File (" & sGridFileType & ") as output file...")
	If sOutputGridFile = "" Then
		Exit Sub
	End If

	Open Table sInputTabFile
	sTab = PathToTableName$(sInputTabFile)

	Set CoordSys Table sTab
	fMinX		= TableInfo(sTab, TAB_INFO_MINX)
	fMinY		= TableInfo(sTab, TAB_INFO_MINY)
	fMaxX		= TableInfo(stab, TAB_INFO_MAXX)
	fMaxY		= TableInfo(stab, TAB_INFO_MAXY)

'	Print Time(24) & " Finding distance between Logitude values"
'	Select LONGITUDE
'		From sTab
'		Order By LONGITUDE
'		Group By LONGITUDE
'		Into __MIN_DIST NoSelect
'
'	fMinDistance	= 2.00
'	Fetch First From __MIN_DIST
'	fValue1 = __MIN_DIST.LONGITUDE
'	Fetch Next From __MIN_DIST
'	Do Until EOT(__MIN_DIST)
'		fValue2  = __MIN_DIST.LONGITUDE
'		If fMinDistance > (fValue2 - fValue1) Then
'			fMinDistance = (fValue2 - fValue1)
'			'Print "Minimum LONGITUDE distance: " & Format$(fMinDistance, "#.##########")
'		End If
'		fValue1 = fValue2
'		Fetch Next From __MIN_DIST
'	Loop
'	mfGridSizeX	= fMinDistance
'	Close Table __MIN_DIST
'
'	Print Time(24) & " Finding distance between Latitude values"
'	Select LATITUDE
'		From sTab
'		Order By LATITUDE
'		Group By LATITUDE
'		Into __MIN_DIST NoSelect
'
'	fMinDistance	= 2.00
'	Fetch First From __MIN_DIST
'	fValue1 = __MIN_DIST.LATITUDE
'	Fetch Next From __MIN_DIST
'
'	Do Until EOT(__MIN_DIST)
'		fValue2  = __MIN_DIST.LATITUDE
'		If fMinDistance > (fValue2 - fValue1) Then
'			fMinDistance = (fValue2 - fValue1)
'			'Print "Minimum LATITUDE distance: " & Format$(fMinDistance, "#.##########")
'		End If
'		fValue1 = fValue2
'		Fetch Next From __MIN_DIST
'	Loop
'	mfGridSizeY	= fMinDistance
'	Close Table __MIN_DIST

	If mfGridSizeX = 0 Then
		mfGridSizeX = 30.0 'meters
	End If

	mfGridSizeY	= mfGridSizeX
	fOriginX		= fMinX - (mfGridSizeX/2)
	fOriginY		= fMinY - (mfGridSizeY/2)
	nNumColumnsX	= (fMaxX - fMinX) / mfGridSizeX
	nNumRowsY		= (fMaxY - fMinY) / mfGridSizeY

	Print "Data Area: Min X: " & Format$(fMinX, "#.######") & " Min Y: " & Format$(fMinY, "#.######")
	Print "Data Area: Max X: " & Format$(fMaxX, "#.######") & " Max Y: " & Format$(fMaxY, "#.######")
	Print "Difference X: " & Format$((fMaxX - fMinX), "#.######")
	Print "Difference Y: " & Format$((fMaxY - fMinY), "#.######")
	Print "Grid Origin X: " & Format$((fOriginX), "#.########")
	Print "Grid Origin Y: " & Format$((fOriginY), "#.########")
	Print "Cell Size X: " & Format$((mfGridSizeX), "#.########")
	Print "Cell Size Y: " & Format$((mfGridSizeY), "#.########")
	Print "Grid Columns X: " & FormatNumber$(nNumColumnsX)
	Print "Grid Rows Y: " & FormatNumber$(nNumRowsY)

	Call ADVStampFixedGridSize(sInputTabFile, TableInfo(sTab, TAB_INFO_COORDSYS_CLAUSE_WITHOUT_BOUNDS), sOutputGridFile, "MI_MRR", fOriginX, fOriginY, mfGridSizeX, mfGridSizeY, nNumColumnsX, nNumRowsY, 3)

	Open Table sOutputGridFile
	Map From PathToTableName$(sOutputGridFile)

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUStampFixedGridSizeTAB")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub MENUSetFixedGridSize(ByVal fGridSizeX As Float, ByVal fGridSizeY As Float)

OnError GoTo ErrorOccured

	mfGridSizeX	= fGridSizeX
	mfGridSizeY	= fGridSizeY

	Print "Grid Size, X: " & Format$(mfGridSizeX, "#.########") & " Y: " & Format$(mfGridSizeY, "#.########")

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUSetFixedGridSize")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub MENUExportRasterFileToASCII

Dim	sRasterFile, sTextFile As String

OnError GoTo ErrorOccured

	sRasterFile	= FileOpenDlg("", "", "BIL", "Select Raster File as input file...")
	If sRasterFile = "" Then
		Exit Sub
	End If

	sTextFile	= FileSaveAsDlg(PathToDirectory$(sRasterFile), Left$(PathToFileName$(sRasterFile), Len(PathToFileName$(sRasterFile)) - 4), "csv", "Select name and location for output CSV file...")
	If sTextFile = "" Then
		Exit Sub
	End If

	Call ADVExportToASCII(sRasterFile, sTextFile)

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUExportRasterFileToASCII")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub MENURunRasterProcessorUI

OnError GoTo ErrorOccured

	Call ADVRunRasterProcessorUI()
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENURunRasterProcessorUI")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function MENUGetFileExtensionFromRasterDriverID(ByVal sRasterDriverID As String) As String

Dim	sExtension As String

OnError GoTo ErrorOccured

'MI_MRR				Multi-Resolution Raster				.mrr
'MI_Encom_Float_GRD		Encom Float Grid					.grd
'MI_VerticalMapper_GRD	Vertical Mapper Grid				.grd
'MI_VerticalMapper_GRC	Vertical Mapper Classified Grid		.grc
'MI_Surfer_Binary_GRD	Surfer Binary Grid					.grd
'MI_GeoTiff_IMG			GeoTiff Image					.tif
'MI_ERMapper_ERS_GRD		ERMapper ERS Grid				.ers
'MI_ESRI_GRD			ESRI Grid							.adf
'MI_BandInterleaved_BIL	Band Interleaved Image (by line)		.bil
'MI_BandInterleaved_BIP	Band Interleaved Image (by pixel)		.bip
'MI_BandInterleaved_BSQ	Band Interleaved Image (sequential)	.bsq
'MI_ESRI_ASCII_GRD		ESRI ASCII Grid					.asc
'MI_Surfer_ASCII_GRD		Surfer ASCII Grid				.grd
'MI_GDAL_GENERIC		GDAL Default Format					.grd

	Do Case sRasterDriverID
		Case "MI_MRR"
			sExtension = "MRR"
		Case "MI_Encom_Float_GRD"
			sExtension = "grd"
		Case "MI_VerticalMapper_GRD"
			sExtension = "grd"
		Case "MI_VerticalMapper_GRC"
			sExtension = "grc"
		Case "MI_Surfer_Binary_GRD"
			sExtension = "grd"
		Case "MI_GeoTiff_IMG"
			sExtension = "tif"
		Case "MI_ERMapper_ERS_GRD"
			sExtension = "ers"
		Case "MI_ESRI_GRD"
			sExtension = "adf"
		Case "MI_BandInterleaved_BIL"
			sExtension = "bil"
		Case "MI_BandInterleaved_BIP"
			sExtension = "bip"
		Case "MI_BandInterleaved_BSQ"
			sExtension = "bsq"
		Case "MI_ESRI_ASCII_GRD"
			sExtension = "asc"
		Case "MI_Surfer_ASCII_GRD"
			sExtension = "grd"
		Case "MI_GDAL_GENERIC"
			sExtension = "grd"
	End Case

	MENUGetFileExtensionFromRasterDriverID = sExtension

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUGetFileExtensionFromRasterDriverID")
	Call ERRShow()

End Function
